@page "/cadastro"
@inject IJSRuntime js

<PageTitle>Cadastro</PageTitle>

<div class="container-fluid border">
    <div class="row">
        <div class="col-sm col-md px-md-3 py-md-3">            
            <div class="form-group">
                <label for="InputEmail">Email</label>
                <input @bind-value="model.Usuario" type="email" class="form-control" id="InputEmail" aria-describedby="emailHelp" placeholder="ex: email@email.com">
            </div>
            <div class="form-group">
                <label for="InputPassword">Senha</label>
                <input @bind-value="model.Senha" type="password" class="form-control" id="InputPassword" placeholder="Senha">
            </div>
            <div class="form-group">
                <label for="InputPassword2">Confirmar-senha</label>
                <input @bind-value="model.ConfirmarSenha" type="password" class="form-control" id="InputPassword2" placeholder="Confirme a senha">
            </div>
            <button @onclick="ConfirmarCadastro" class="btn btn-primary">Cadastrar</button>
        </div>
    </div>
</div>

@code {
    public class LoginModel
    {
        public string Usuario { get; set; } = string.Empty;
        public string Senha { get; set; } = string.Empty;
        public string ConfirmarSenha { get; set; } = string.Empty;
    }

    private Task<IJSObjectReference>? _internal;

    private Task<IJSObjectReference> Module => _internal ??= js.InvokeAsync<IJSObjectReference>("import", "./js/Authentication.js").AsTask();

    public LoginModel model = new();

    public async Task ConfirmarCadastro()
    {
        var module = await Module;
        var created = await module.InvokeAsync<bool>("CreateUser", model.Usuario, model.Senha);

        if (created)
            Console.WriteLine("Usuário criado com sucesso!");
        else
            Console.WriteLine("Erro ao criar usuário.");
    }
}